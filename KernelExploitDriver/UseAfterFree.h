#ifndef __H_USEAFTERFREE_H__
#define __H_USEAFTERFREE_H__

#include <ntddk.h>
#include "Common.h"

#define _STRINGIFY(value) #value
#define STRINGIFY(value) _STRINGIFY(value)

typedef VOID(*FunctionPointer)(VOID);

typedef struct _USE_AFTER_FREE
{
	FunctionPointer Callback;
	CHAR chBuffer[80];
}USE_AFTER_FREE, *PUSE_AFTER_FREE;

typedef struct _UAF_FAKE_OBJECT
{
#ifdef _X86_
	CHAR chBuffer[84];
#else
	CHAR chBuffer[88];
#endif
}UAF_FAKE_OBJECT, *PUAF_FAKE_OBJECT;

VOID
UAFObjectCallback(VOID);

NTSTATUS
CallUAFObject(VOID);

NTSTATUS
AllocateUAFObject(VOID);

NTSTATUS
FreeUAFObject(VOID);

NTSTATUS
UseAfterFreeHandler(
	_In_ PIRP pIrp,
	_In_ PIO_STACK_LOCATION pStackLocation
);

#endif